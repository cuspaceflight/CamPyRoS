"""6DOF Martlet trajectory simulator"""
'''Contains classes and functions used to run trajectory simulations'''
'''All units in SI unless otherwise stated'''

'''
Nomenclature is the mostly same as used in https://apps.dtic.mil/sti/pdfs/AD0642855.pdf

COORDINATE SYSTEM NOMENCLATURE
x,y,z = Body coordinate system (origin on rocket, rotates with the rocket)
X,Y,Z = Inertial coordinate system (does not rotate, fixed origin)
X', Y', Z' = Launch site coordinate system (origin on launch site, rotates with the Earth)


Would be useful to define directions, e.g. maybe
- Body:
    z in direction the rocket points? x and y aligned with launch site coordinates at t=0?

- Launch site:
    X' points East, Y' points North, Z' points upwards (towards space)
    
- Inertial:
    Aligned with launch site coordinate system at t=0

'''

import csv
import numpy as np
import matplotlib.pyplot as plt


#Import standard atmosphere - copied from Joe Hunt's simulation
with open('atmosphere_data.csv') as csvfile:
    standard_atmo_data = csv.reader(csvfile)
    adat, ddat, sdat, padat = [], [], [], []
    next(standard_atmo_data)
    for row in standard_atmo_data:
        adat.append(float(row[0]))
        ddat.append(float(row[1]))
        sdat.append(float(row[2]))
        padat.append(float(row[3]))
          

#e.g. how we could use classes to store data about the rocket
class LaunchSite:
  def __init__(self, rail_length, alt, long, lat, wind):
    self.rail_length = rail_length
    self.alt = alt              #Altitude
    self.long = long            #Longitude
    self.lat = lat              #Latitude
    self.wind = wind            #Wind speed relative to the surface of the Earth
        
class Rocket:
  def __init__(self, mass_data, motor_data, aerodynamic_data, launch_site):
      
    self.launch_site = launch_site                  #LaunchSite object
      
    #Mass data - it's assumed that 'mass_data' is a dictionary
    self.dry_mass = mass_data['dry_mass']           #Dry mass kg
    self.Ixx = mass_data['Ixx']                     #Principal moments of inertia kg m2
    self.Iyy = mass_data['Iyy']
    self.Izz = mass_data['Izz']
    
    self.motor_data = motor_data                    #e.g. motor data
    self.aerodynamic_data = aerodynamic_data        #e.g. drag coefficients


    self.time = 0               #Time since ignition s
    self.m = 0                  #Instantaneous mass (will vary as fuel is used) kg
    self.w = [0,0,0]            #Angular velocity of x,y,z in the X,Y,Z coordinate system [X,Y,Z] rad/s
    self.v = [0,0,0]            #Velocity in intertial coordinates [X, Y, Z] m/s
    self.pos = [0,0,0]          #Position in inertial coordinates [X, Y, Z] m
    self.alt = launch_site.alt  #Altitude
    
    def body_to_intertial(vector):  #Convert a vector in x,y,z to X,Y,Z
        pass
    
    def aero_forces():          #Returns aerodynamic forces and moments based on current pos and vel 
        pass

    
    def motor_forces():         #Returns thrust and moments generated by the motor, based on current conditions
        pass
    
    
    def accelerations(forces, moments):     #Returns translational and rotational accelerations on the rocket, given the applied forces
        pass                                #Some kind of implementation of the equations of motion


#Functions
def integrate(initial_conditions, accelerations):      #Not sure what other inputs would be needed
    pass


def run_simulation(rocket):     #'rocket' can be a Rocket object
    pass                        #Maybe returns a dictionary of data?



def plot_altitude_time(simulation_output):  #takes data from a simulation and plots nice graphs for you
    pass        
