"""6DOF Martlet trajectory simulator"""
'''All units in SI unless otherwise stated'''

'''
Contains classes and functions used to run trajectory simulations
'''

import csv
import numpy as np
import matplotlib.pyplot as plt


#Import standard atmosphere - copied from Joe Hunt's simulation
with open('atmosphere_data.csv') as csvfile:
    standard_atmo_data = csv.reader(csvfile)
    adat, ddat, sdat, padat = [], [], [], []
    next(standard_atmo_data)
    for row in standard_atmo_data:
        adat.append(float(row[0]))
        ddat.append(float(row[1]))
        sdat.append(float(row[2]))
        padat.append(float(row[3]))
          

#e.g. how we could use classes to store data about the rocket
class LaunchSite:
  def __init__(self, rail_length, alt, long, lat):
    self.rail_length = rail_length
    self.alt = alt              #Altitude
    self.long = long            #Longitude
    self.lat = lat              #Latitude
        
class Rocket:
  def __init__(self, mass_data, motor_data, aerodynamic_data, launch_site):
    self.mass_data = mass_data                      #e.g. dry mass, moments of inertia
    self.motor_data = motor_data                    #e.g. motor data
    self.aerodynamic_data = aerodynamic_data        #e.g. drag coefficients
    self.launch_site = launch_site                  #Could use a LaunchSite object
    
    self.pos_inert = [0,0,0]    #Position in inertial frame
    self.vel_inert = [0,0,0]    #Velocity in intertial frame
    self.rot = [0,0,0]          #Some way of storing the body's attitude - might need a matrix?
    self.time = 0               #Time since ignition
    self.alt = launch_site.alt  #Altitude
        
    def body_to_inertial(vector):  #Converts a vector in the body coordinate system to be in the inertial one
        pass
    
    def aero_forces():          #Returns aerodynamic forces based on current pos and vel
        pass
            
    def aero_moments():         #Returns aerodynamic moments based on current pos and vel
        pass
    
    def motor_forces():         #Returns thrust generated by the motor, based on current conditions
        pass
    
    def motor_moments():        #Returns moments generated by the motor e.g. due to thrust misalignment
        pass
    
    def accelerations(forces, moments):     #Returns translational and rotational accelerations on the rocket, given the applied forces
        pass                                #Some kind of implementation of the equations of motion


#Functions
def integrate(initial_conditions, accelerations):      #Not sure what other inputs would be needed
    pass


def run_simulation(rocket):     #the 'rocket' can be a Rocket object
    pass                        #Maybe returns a dictionary of data?



def plot_altitude_time(simulation_output):  #takes data from a simulation and plots nice graphs for you
    pass        
